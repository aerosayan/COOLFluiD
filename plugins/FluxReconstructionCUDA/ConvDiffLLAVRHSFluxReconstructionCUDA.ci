#include "Framework/CellConn.hh"
#include "Framework/MeshData.hh"
#include "Framework/MathTypes.hh"

#ifdef CF_HAVE_CUDA
#include "Framework/CudaDeviceManager.hh"
#endif

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace FluxReconstructionMethod {

//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::ConvDiffLLAVRHSFluxReconstructionCUDA(const std::string& name) :
  ConvRHSFluxReconstruction(name), 
  socket_states("states"),
  socket_gradientsCUDA("gradientsCUDA"),
  socket_gradientsAVCUDA("gradientsAVCUDA"),        
  socket_solPntNormals("solPntNormals"),
  socket_flxPntNormals("flxPntNormals"),
  socket_faceDir("faceDir"),
  socket_volumes("volumes"),
  socket_cellVolumes("cellVolumes"),
  m_cellFaces(CFNULL),
  m_isFaceOnBoundaryCell(CFNULL),
  m_cellConn(),
  m_nbBlocksPerGridX(),
  m_nbBlocksPerGridY(),
  m_stateIDs(),
  m_neighbCellIDs(),
  m_innerCellIsLeft(),
  m_solSolDep2(),
  m_solPolyDerivAtSolPnts2(),
  m_cflConvDiffRatio()
{
  this->addConfigOptionsTo(this);
  
  m_nbCellsPerBlock = 32;
  setParameter("NbCellsPerBlock",&m_nbCellsPerBlock);

  m_nbThreadsOMP = 12;
  setParameter("NbThreadsOMP",&m_nbThreadsOMP);
  
  m_onGPU = true;
  setParameter("OnGPU",&m_onGPU);
  CFLog(VERBOSE,"Creating cuda solver\n");
  
  m_kappa = 1.0;
  setParameter( "Kappa", &m_kappa);
    
  m_peclet = 5.0;
  setParameter( "Peclet", &m_peclet);
    
  m_s0 = 0.0;
  setParameter( "S0", &m_s0);
  
  m_freezeLimiterIter = MathTools::MathConsts::CFuintMax();
  setParameter( "FreezeLimiterIter", &m_freezeLimiterIter);
    
  m_monitoredVar = 0;
  setParameter( "MonitoredVar", &m_monitoredVar);
    
  m_addUpdCoeff = true;
  setParameter( "AddUpdateCoeff", &m_addUpdCoeff);
    
  m_monitoredPhysVar = MathTools::MathConsts::CFuintMax();
  setParameter( "MonitoredPhysVar", &m_monitoredPhysVar);
    
  m_LLAVBCZero = true;
  setParameter( "LLAVBCZero", &m_LLAVBCZero);
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::~ConvDiffLLAVRHSFluxReconstructionCUDA()
{  
}

//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
void ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::unsetup()
{  
  ConvRHSFluxReconstruction::unsetup();
}

//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
void ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFuint > ("NbCellsPerBlock", "Number of cells per block");
  options.template addConfigOption< CFuint > ("NbThreadsOMP", "Number of OMP threads");
  options.template addConfigOption< bool > ("OnGPU", "Flag telling to solve on GPU");
  
  options.template addConfigOption< CFreal,Config::DynamicOption<> >("Kappa","Kappa factor of artificial viscosity.");
  
  options.template addConfigOption< CFreal,Config::DynamicOption<> >("Peclet","Peclet number to be used for artificial viscosity.");
  
  options.template addConfigOption< CFreal,Config::DynamicOption<> >("S0","Reference smoothness factor, will be multiplied by -log(P).");
  
  options.template addConfigOption< CFuint,Config::DynamicOption<> >("FreezeLimiterIter","Iteration after which to freeze the residual.");
    
  options.template addConfigOption< CFuint>("MonitoredVar","Index of the monitored var for positivity preservation.");
  
  options.template addConfigOption< bool >("AddUpdateCoeff","Boolean telling whether the update coefficient based on the artificial flux is added.");
  
  options.template addConfigOption< bool >("LLAVBCZero","Boolean telling whether to set LLAV to zero on the bnd.");
  
  options.template addConfigOption< CFuint>("MonitoredPhysVar","Index of the monitored physical var for positivity preservation, if not specified MonitoredVar is used instead.");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
void ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::configure ( Config::ConfigArgs& args )
{
  ConvRHSFluxReconstruction::configure(args);
}

//////////////////////////////////////////////////////////////////////////////


template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
void ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::initializeComputationRHS()
{
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::initializeComputationRHS() START\n");
  
  // copy locally the ghost states, gstates should be treated as states, with pointers to a 1D storage
  //const CFuint nbEqs = PhysicalModelStack::getActive()->getNbEq();
  
  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::initializeComputationRHS() END\n");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
std::vector<Common::SafePtr<Framework::BaseDataSocketSink> > ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::needsSockets()
{
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  std::vector<SafePtr<BaseDataSocketSink> > result = ConvRHSFluxReconstruction::needsSockets();
  result.push_back(&socket_states);
  result.push_back(&socket_gradientsCUDA);
  result.push_back(&socket_gradientsAVCUDA);  
  result.push_back(&socket_solPntNormals);
  result.push_back(&socket_flxPntNormals);
  result.push_back(&socket_faceDir);
  result.push_back(&socket_volumes);
  result.push_back(&socket_cellVolumes);
  return result;
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
void ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::storeStencilData()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() START\n");;
  
//  // prepare the building of the faces
//  SafePtr<GeometricEntityPool<FaceToCellGEBuilder> > geoBuilder = getMethodData().getFaceBuilder();
//  //geoBuilder->getGeoBuilder()->setDataSockets(socket_states, socket_gstates, socket_nodes);
//  FaceToCellGEBuilder::GeoData& geoData = geoBuilder->getDataGE();
//  SafePtr<TopologicalRegionSet> currTrs = MeshDataStack::getActive()->getTrs("PartitionFaces");
//  const CFuint nbTrsFaces = currTrs->getLocalNbGeoEnts();
//  geoData.facesTRS = currTrs;
//  
//  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() => Nb of PartitionFaces = " << nbTrsFaces << "\n");
//  
//  for (CFuint iFace = 0; iFace < nbTrsFaces; ++iFace) {
//    geoData.idx = iFace;
//    GeometricEntity*const face = geoBuilder->buildGE();
//    const CFuint ghostID = face->getState(1)->getLocalID();
//
//    isPartitionState[ghostID] = true;
//    geoBuilder->releaseGE(); 
//  }
  
  // reorder the stencil storage to place face neighbors at first   
//  DataHandle<vector<State*> > stencil = socket_stencil.getDataHandle();
//  const CFuint nbCells = stencil.size();
//  cf_assert(nbCells > 0);
//  m_cellInfo.resize(5*nbCells);
  
//  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() => nbCells = " << nbCells << "\n");
  
//  CFuint countStencil = 0;
//  CFuint maxNbNeighbors = 0;
//  for (CFuint i = 0; i < nbCells; ++i) {
//    cf_assert(i < stencil.size());
//    maxNbNeighbors = std::max((CFuint)maxNbNeighbors, (CFuint)stencil[i].size());
//    countStencil += stencil[i].size();
//  }
  
 // CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() => maxNbNeighbors = " << maxNbNeighbors << "\n");
  
  // not all faces belong to the stencil: partition faces are discarded!
  // stencil must be bigger than the local (in this processor) number of cells  
//  cf_assert(countStencil > nbCells);
//  cf_assert(maxNbNeighbors > 0);
//  
//  m_cellStencil.resize(countStencil);
//  m_neighborTypes.resize(countStencil);
  
  // preallocated array to use for reordering, cell by cell
//  vector<State*> tmp; tmp.reserve(maxNbNeighbors);
  
  // create and setup the cell builder
//  SafePtr<GeometricEntityPool<StdTrsGeoBuilder> > cellBuilder = getMethodData().getStdTrsGeoBuilder();
//  SafePtr<StdTrsGeoBuilder> cellBuilderPtr = cellBuilder->getGeoBuilder();
//  StdTrsGeoBuilder::GeoData& cellData = cellBuilder->getDataGE();
//  SafePtr<TopologicalRegionSet> cells = MeshDataStack::getActive()->getTrs("InnerCells");
//  cellData.trs = cells;
//  cf_assert(nbCells == cellData.trs->getLocalNbGeoEnts());
//  
//  CFuint countN = 0;
//  for (CFuint iCell = 0; iCell < nbCells; ++iCell) {
//    // build the cell
//    cellData.idx = iCell;
//    GeometricEntity *const cell = cellBuilder->buildGE();
//    const CFuint cellID = cell->getState(0)->getLocalID();
//    cf_assert(cellID == iCell);
//    cf_assert(iCell < stencil.size());
//    vector<State*>& currStencil = stencil[iCell];
//    const CFuint stencilSize = currStencil.size();
//    cf_assert(stencilSize > 0);
//    
//    const vector<GeometricEntity*>& faces = *cell->getNeighborGeos();
//    const CFuint nbFaces = faces.size();
//    cf_assert(nbFaces > 2);
//    
//    // set the cell info array 
//    const CFuint cstart = iCell*5;
//    cf_assert(cstart   < m_cellInfo.size());
//    cf_assert(cstart+1 < m_cellInfo.size());
//    cf_assert(cstart+2 < m_cellInfo.size());
//    
//    m_cellInfo[cstart]   = countN;      // stencil info start for cell iCell
//    m_cellInfo[cstart+1] = stencilSize; // stencil size for cell iCell
//    m_cellInfo[cstart+2] = nbFaces;     // number of faces (including partition) for cell iCell
    
//    // insert face neighbors first
//    CFuint nbActiveFaces = 0;
//    for (CFuint iFace = 0; iFace < nbFaces; ++iFace) {
//      GeometricEntity *const face = faces[iFace];
//      State *const st = (face->getState(0)->getLocalID() == cellID) ? face->getState(1) : face->getState(0);
//      
//      // WATCH OUT: partition faces must be discarded in the stencil for consistency
//      //            with the algorithm computing the stencil
//      if (!st->isGhost() || (st->isGhost() && !isPartitionState[st->getLocalID()])) {
//        // here you are either internal (updatable or not) or not-partition-boundary ghost state
//	// hence you have a VALID local ID
//	CFLog(DEBUG_MIN, "st->isGhost() = " << st->isGhost() << ", st->getLocalID() = " << st->getLocalID() << "\n");
//	cf_assert(countN < m_cellStencil.size());
//	// cf_assert(st->getLocalID() < nbCells) fails on very small meshes for which nb of ghosts >= nbCells 
//        cf_assert(countN < m_cellStencil.size());
//	m_cellStencil[countN] = st->getLocalID();
//	
//        // neighbor cell types: internal (1), partition (0), physical boundary (-1)  
//        cf_assert(countN < m_neighborTypes.size());
//        m_neighborTypes[countN] = (!st->isGhost()) ? 1 : -1;
//	
//        ++countN;
//        ++nbActiveFaces;
//      }
//    }
    
//    cf_assert(cstart+4 < m_cellInfo.size());
//    m_cellInfo[cstart+4] = nbActiveFaces; // number of active faces in cell iCell
    
    // CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() => (iCell,countN) = " << iCell << "," << countN << "\n");
    
//    for (CFuint n = 0; n < stencilSize; ++n) {
//      cf_assert(n < currStencil.size());
//      State *const neighbor = currStencil[n];
//      bool found = false;
//      for (CFuint iFace = 0; iFace < nbFaces; ++iFace) {
//	cf_assert(iFace < faces.size());
//	GeometricEntity *const face = faces[iFace];
//	State *const st = (face->getState(0)->getLocalID() == cellID) ? face->getState(1) : face->getState(0);
//	if (neighbor == st) {
//	  found = true;
//	  break;
//	}
//      }
//      
//      // insert remaining vertex neighbors 
//      if(!found) {
//	if (!neighbor->isGhost() || (neighbor->isGhost() && !isPartitionState[neighbor->getLocalID()])) {
//	  cf_assert(countN < m_cellStencil.size());
//	  cf_assert(countN < m_neighborTypes.size());
//	  m_cellStencil[countN]   = neighbor->getLocalID();
//	  m_neighborTypes[countN] = (!neighbor->isGhost()) ? 1 : -1;
//	  ++countN;
//	}
//      }
      
      // CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() => found after = " << found << "\n");
//    } 
    
    //   CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() => (iCell,countN+1) = " << iCell << "," << countN << "\n");
    
    //cellBuilder->releaseGE();
//  }
 // CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() => hello 3\n");
  
  
  //cf_assert(countN == m_cellStencil.size());
 
  // set the cell shapes
//  SafePtr< vector<ElementTypeData> > elemType = MeshDataStack::getActive()->getElementTypeData();
//  const CFuint nbElemTypes = elemType->size();
//  CFuint counter = 0;
//  for (CFuint iType = 0; iType < nbElemTypes; ++iType) {
//    const CFuint nbCellsInType = (*elemType)[iType].getNbElems();
//    for (CFuint i = 0; i < nbCellsInType; ++i, ++counter) {
//      cf_assert(counter*5+3 < m_cellInfo.size());
//      m_cellInfo[counter*5+3] = (*elemType)[iType].getGeoShape();
//    }
//  }
  
  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::storeStencilData() END\n");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
void ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::setup()
{
  CFAUTOTRACE;
  
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::setup() START\n");
  
  ConvRHSFluxReconstruction::setup();

   // get the local FR data
  vector< FluxReconstructionElementData* >& frLocalData = getMethodData().getFRLocalData();
  cf_assert(frLocalData.size() > 0);
  // for now, there should be only one type of element
  cf_assert(frLocalData.size() == 1);
    
  // get flux point local coordinates
  m_nbrFlxPnts = frLocalData[0]->getFlxPntsLocalCoords()->size();
  
  // get convective/diffusive CFL ratio
  m_cflConvDiffRatio = frLocalData[0]->getCFLConvDiffRatio();
  
  m_subcellRes = frLocalData[0]->getSubcellResolution();
  
  // get the coefs for extrapolation of the node artificial viscosities to the flx pnts
  m_nodePolyValsAtFlxPnts = frLocalData[0]->getNodePolyValsAtPnt(*(frLocalData[0]->getFlxPntsLocalCoords()));
  
  // get the coefs for extrapolation of the node artificial viscosities to the sol pnts
  m_nodePolyValsAtSolPnts = frLocalData[0]->getNodePolyValsAtPnt(*(frLocalData[0]->getSolPntsLocalCoords()));
  
  // number of cell corner nodes
  /// @note in the future, hanging nodes should be taken into account here
  m_nbrCornerNodes = frLocalData[0]->getNbrCornerNodes();
  
  // get the number of nodes in the mesh
  const CFuint nbrNodes = MeshDataStack::getActive()->getNbNodes();
  
  SafePtr<RealMatrix> vdm = frLocalData[0]->getVandermondeMatrix();
  
  SafePtr<RealMatrix> vdmInv = frLocalData[0]->getVandermondeMatrixInv();
  
  RealMatrix temp(m_nbrSolPnts,m_nbrSolPnts);
  temp = 0.0;
  if (m_dim == 2)
  {
    for (CFuint idx = 0; idx < (m_order)*(m_order); ++idx)
    {
      temp(idx,idx) = 1.0;
    }
  }
  else if (m_dim == 3)
  {
    for (CFuint idx = 0; idx < (m_order)*(m_order)*(m_order); ++idx)
    {
      temp(idx,idx) = 1.0;
    }
  }
  
  m_transformationMatrix.resize(m_nbrSolPnts,m_nbrSolPnts);
  
  m_transformationMatrix = (*vdm)*temp*(*vdmInv); 
  
  m_nbNodeNeighbors.resize(nbrNodes);
  
  m_nbNodeNeighbors = (CFuint) 0;
  
  m_flagComputeNbNghb = true;
  
  cf_assert(m_monitoredVar < m_nbrEqs);
  
  m_nodeEpsilons.resize(nbrNodes);
  
  m_nodeEpsilons = 0.0;
  
  // store locally the cell centers
  // in the future compute them on the GPU, this needs element node connectivity + number of nodes per element info 
  DataHandle < Framework::State*, Framework::GLOBAL > states = socket_states.getDataHandle();
  const CFuint nbStates = states.size(); 
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  
  m_stateIDs.resize(nbStates);
  
  m_solSolDep2.resize(m_nbrSolPnts*m_nbrSolSolDep);
  m_solFlxDep2.resize(m_nbrSolPnts*m_nbrFlxDep);
  m_flxSolDep2.resize(m_nbrFlxPnts*m_nbrSolDep);
  m_solPolyDerivAtSolPnts2.resize(m_nbrSolPnts*m_nbrSolPnts*m_dim);
  m_solPolyValsAtFlxPnts2.resize(m_nbrFlxPnts*m_nbrSolPnts);
  m_flxPntFlxDim2.resize(m_nbrFlxPnts);
  m_corrFctDiv2.resize(m_nbrSolPnts*m_nbrFlxPnts);
  m_faceFlxPntConn2.resize(m_nbrFlxPnts);
  m_faceIntegrationCoefs2.resize(m_nbrFaceFlxPnts);
  m_transformationMatrix2.resize(m_nbrSolPnts*m_nbrSolPnts);
  m_nodePolyValsAtFlxPnts2.resize(m_nbrFlxPnts*m_nbrCornerNodes);
  m_nodePolyValsAtSolPnts2.resize(m_nbrSolPnts*m_nbrCornerNodes);
  
  for (CFuint iSolPnt = 0; iSolPnt < m_nbrSolPnts; ++iSolPnt)
  {
    for (CFuint jSolPnt = 0; jSolPnt < m_nbrSolSolDep; ++jSolPnt)
    {
      m_solSolDep2[iSolPnt*m_nbrSolSolDep+jSolPnt] = (*m_solSolDep)[iSolPnt][jSolPnt]; 
    }
    for (CFuint iFlxPnt = 0; iFlxPnt < m_nbrFlxDep; ++iFlxPnt)
    {
      m_solFlxDep2[iSolPnt*m_nbrFlxDep+iFlxPnt] = (*m_solFlxDep)[iSolPnt][iFlxPnt];
    }
    for (CFuint iFlxPnt = 0; iFlxPnt < m_nbrFlxPnts; ++iFlxPnt)
    {
      m_solPolyValsAtFlxPnts2[iSolPnt+iFlxPnt*m_nbrSolPnts] = (*m_solPolyValsAtFlxPnts)[iFlxPnt][iSolPnt];
      m_corrFctDiv2[iSolPnt*m_nbrFlxPnts+iFlxPnt] = m_corrFctDiv[iSolPnt][iFlxPnt];
    }
    
    for (CFuint iNode = 0; iNode < m_nbrCornerNodes; ++iNode)
    {
      m_nodePolyValsAtSolPnts2[iSolPnt*m_nbrCornerNodes+iNode] = m_nodePolyValsAtSolPnts[iSolPnt][iNode]; 
    }
  }
  
  for (CFuint iFlxPnt = 0; iFlxPnt < m_nbrFlxPnts; ++iFlxPnt)
  {
    m_flxPntFlxDim2[iFlxPnt] = (*m_flxPntFlxDim)[iFlxPnt];
    
    for (CFuint iSolPnt = 0; iSolPnt < m_nbrSolDep; ++iSolPnt)
    {        
      m_flxSolDep2[iFlxPnt*m_nbrSolDep+iSolPnt] = (*m_flxSolDep)[iFlxPnt][iSolPnt];
    }
    
    for (CFuint iNode = 0; iNode < m_nbrCornerNodes; ++iNode)
    {
      m_nodePolyValsAtFlxPnts2[iFlxPnt*m_nbrCornerNodes+iNode] = m_nodePolyValsAtFlxPnts[iFlxPnt][iNode]; 
    }
  }

  for (CFuint iFace = 0; iFace < frLocalData[0]->getNbrCellFaces(); ++iFace)
  {
    for (CFuint iFlxPnt = 0; iFlxPnt < m_nbrFaceFlxPnts; ++iFlxPnt)
    {
      m_faceFlxPntConn2[iFace*m_nbrFaceFlxPnts+iFlxPnt] = (*m_faceFlxPntConn)[iFace][iFlxPnt];
    }
  }

  for (CFuint iFlxPnt = 0; iFlxPnt < m_nbrFaceFlxPnts; ++iFlxPnt)
  {
    m_faceIntegrationCoefs2[iFlxPnt] = (*m_faceIntegrationCoefs)[iFlxPnt];
  }
  
  m_solSolDep2.put();
  m_solFlxDep2.put();
  m_flxSolDep2.put();
  m_flxPntFlxDim2.put();
  m_corrFctDiv2.put();
  m_faceFlxPntConn2.put();
  m_faceIntegrationCoefs2.put();
  m_nodeEpsilons.put();
  m_nodePolyValsAtFlxPnts2.put();
  m_nodePolyValsAtSolPnts2.put();
  
  for (CFuint iSolPnt = 0; iSolPnt < m_nbrSolPnts; ++iSolPnt)
  {
    for (CFuint jSolPnt = 0; jSolPnt < m_nbrSolPnts; ++jSolPnt)
    {
      for (CFuint iDim = 0; iDim < m_dim; ++iDim)
      {
        m_solPolyDerivAtSolPnts2[iSolPnt*m_dim*m_nbrSolPnts+iDim*m_nbrSolPnts+jSolPnt] = (*m_solPolyDerivAtSolPnts)[iSolPnt][iDim][jSolPnt];
      }
      m_transformationMatrix2[iSolPnt*m_nbrSolPnts+jSolPnt] = m_transformationMatrix(iSolPnt,jSolPnt);
    }
  }
  
  m_solPolyDerivAtSolPnts2.put();
  m_solPolyValsAtFlxPnts2.put();
  m_transformationMatrix2.put();
  
  // get the elementTypeData
  SafePtr< vector<ElementTypeData> > elemType = MeshDataStack::getActive()->getElementTypeData();
  
  // loop over element types, for the moment there should only be one
  const CFuint nbrElemTypes = elemType->size();
  cf_assert(nbrElemTypes == 1);
  
  // get start and end indexes for this type of element
  cf_assert((*elemType)[0].getStartIdx() == 0);
  const CFuint nbCells   = (*elemType)[0].getEndIdx();
  
  storeStencilData();
  
  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::setup() after storeStencilData\n");
  
  //m_cellFaces = MeshDataStack::getActive()->getConnectivity("cellFaces");
//  
//  copyLocalCellConnectivity();	
  
  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::setup() after copyLocalCellConnectivity\n");
  
  // what about packing m_cellInfo, m_cellStencil and m_neighborTypes in one object? inefficient?
  
  // set the sizes of the grid to launch on the Framework::DEVICE
  const CFuint nbActualBlocks = nbCells/m_nbCellsPerBlock;

#ifdef CF_HAVE_CUDA
  m_nbBlocksPerGridX = std::min(nbActualBlocks, (CFuint)CudaEnv::CudaDeviceManager::getInstance().getNBlocks());
  m_nbBlocksPerGridY = static_cast<CFuint>(std::max((CFreal)1., std::ceil((CFreal)nbActualBlocks/
									  (CFreal)m_nbBlocksPerGridX)));
  CFLog(INFO, "ConvDiffLLAVRHSFluxReconstructionCUDA::setup() => Kernel grid sizes: <<< [" << 
	m_nbBlocksPerGridX << " - " << m_nbBlocksPerGridY << "], " << 
	CudaEnv::CudaDeviceManager::getInstance().getNThreads() << ">>>\n");
  CFLog(INFO, m_nbBlocksPerGridX*m_nbBlocksPerGridY  << " >= " << nbCells/m_nbCellsPerBlock << "\n");
  cf_assert(m_nbBlocksPerGridX*m_nbBlocksPerGridY >= nbCells/m_nbCellsPerBlock);
#endif

  // get InnerCells TopologicalRegionSet
  Common::SafePtr<TopologicalRegionSet> cells = MeshDataStack::getActive()->getTrs("InnerCells");

  // get geometric entity builder
  //Common::SafePtr<GeometricEntityPool<StdTrsGeoBuilder> > geoBuilder = getMethodData().getStdTrsGeoBuilder();

  m_cellBuilder2 = getMethodData().getCellBuilder();

  // get the geodata of the geometric entity builder and set the TRS
  CellToFaceGEBuilder::GeoData& geoData = m_cellBuilder2->getDataGE();
  geoData.trs = cells;
  
  m_isFaceOnBoundaryCell = m_cellBuilder2->getGeoBuilder()->getIsFaceOnBoundary();

  m_neighbCellIDs.resize(nbCells*2*PHYSICS::DIM);
  m_neighbFaceIDs.resize(nbCells*2*PHYSICS::DIM);
  m_innerCellIsLeft.resize(nbCells*2*PHYSICS::DIM);
  m_neighbNodeIDs.resize(nbCells*m_nbrCornerNodes);
  m_cellEpsilons.resize(nbCells);
  m_cellEpsilons = 0.0;  
  
      // build the GeometricEntity
      geoData.idx = 0;
      GeometricEntity *const cell = m_cellBuilder2->buildGE();
      
      const std::vector< Framework::GeometricEntity* >* faces = cell->getNeighborGeos();
      
      std::vector< Framework::Node*  >* nodes = cell->getNodes();
        
      std::vector< Framework::Node*  >* faceNodes = (*faces)[0]->getNodes();
        
      m_nbFaceNodes = faceNodes->size();

      //release the GeometricEntity
      m_cellBuilder2->releaseGE();
      
      CFLog(INFO, "nbFaceNodes: " << m_nbFaceNodes << "\n");
  
  m_faceNeighbNodeIDs.resize(nbCells*m_nbFaceNodes*PHYSICS::DIM*2);

  // loop over element types
  for (CFuint iElemType = 0; iElemType < nbrElemTypes; ++iElemType)
  {
    // get start and end indexes for this type of element
    const CFuint startIdx = (*elemType)[iElemType].getStartIdx();
    const CFuint endIdx   = (*elemType)[iElemType].getEndIdx();

    // number of states in this element type
    const CFuint nbrStates = frLocalData[iElemType]->getNbrOfSolPnts();

    // loop over cells
    for (CFuint elemIdx = startIdx; elemIdx < endIdx; ++elemIdx)
    {
      // build the GeometricEntity
      geoData.idx = elemIdx;
      GeometricEntity *const cell = m_cellBuilder2->buildGE();

      const CFuint cellID = cell->getID();

      // get the states in this cell
      vector< State* >* states = cell->getStates();
      
      const std::vector< Framework::GeometricEntity* >* faces = cell->getNeighborGeos();
      
      std::vector< Framework::Node*  >* nodes = cell->getNodes();
      
      const CFuint nbFaces = faces->size();

      for (CFuint iSol = 0; iSol < nbrStates; ++iSol)
      {
        m_stateIDs[cellID * nbrStates + iSol] = (*states)[iSol]->getLocalID();
      }
      
      for (CFuint iNode = 0; iNode < m_nbrCornerNodes; ++iNode)
      {
        // get node ID
        const CFuint nodeID = (*nodes)[iNode]->getLocalID();
    
        m_neighbNodeIDs[cellID * m_nbrCornerNodes + iNode] = nodeID;
        
        m_nbNodeNeighbors[nodeID] += 1;
      }

      for (CFuint iFace = 0; iFace < nbFaces; ++iFace)
      {
        if (!((*m_isFaceOnBoundaryCell)[iFace]))
        {
          const CFuint leftID = (*faces)[iFace]->getNeighborGeo(LEFT)->getID();
                  
          m_neighbFaceIDs[cellID*nbFaces + iFace] = (*faces)[iFace]->getID();

          if (leftID != cellID)
          {
            m_neighbCellIDs[cellID*nbFaces + iFace] = leftID;
            m_innerCellIsLeft[cellID*nbFaces + iFace] = 0;
          }
          else
          {
            m_neighbCellIDs[cellID*nbFaces + iFace] = (*faces)[iFace]->getNeighborGeo(RIGHT)->getID();
            m_innerCellIsLeft[cellID*nbFaces + iFace] = 1;
          }
        }
        else
        {
          m_neighbCellIDs[cellID*nbFaces + iFace] = -1;
        }
        
        std::vector< Framework::Node*  >* faceNodes = (*faces)[iFace]->getNodes();
        
        m_nbFaceNodes = faceNodes->size();
    
        for (CFuint iNode = 0; iNode < m_nbFaceNodes; ++iNode)
        {
          const CFuint faceNodeIdx = (*faceNodes)[iNode]->getLocalID();
          
          m_faceNeighbNodeIDs[(*faces)[iFace]->getID() * m_nbFaceNodes+iNode] = faceNodeIdx;
        }
      }

      //release the GeometricEntity
      m_cellBuilder2->releaseGE();
    }
  }
  m_stateIDs.put();
  m_neighbCellIDs.put();
  m_neighbFaceIDs.put();
  m_innerCellIsLeft.put();
  m_neighbNodeIDs.put();
  m_nbNodeNeighbors.put();
  m_cellEpsilons.put();
  m_faceNeighbNodeIDs.put();

  //socket_faceDir.getDataHandle().getLocalArray()->put();
  //socket_solPntNormals.getDataHandle().getLocalArray()->put();
  //socket_flxPntNormals.getDataHandle().getLocalArray()->put();

  CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::setup() END\n");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename SCHEME, typename PHYSICS, typename PHYSICSNS, CFuint ORDER, CFuint NB_BLOCK_THREADS>
void ConvDiffLLAVRHSFluxReconstructionCUDA<SCHEME,PHYSICS,PHYSICSNS,ORDER,NB_BLOCK_THREADS>::copyLocalCellConnectivity()
{
  CFAUTOTRACE;
  
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  // set the cell local connectivity data
  SafePtr< vector<ElementTypeData> > elemType = MeshDataStack::getActive()->getElementTypeData();
  const CFuint nbElemTypes = elemType->size();
  
  m_cellConn.resize(8); // maximum number of types is 8 (@see src/Framework/CFGeoShape.hh
  m_cellStateConn.resize(8);
  for (CFuint iType = 0; iType < nbElemTypes; ++iType) {
    const CFGeoShape::Type shapeIdx = (*elemType)[iType].getGeoShape();
    const Table<CFuint>& conn = *LocalConnectionData::getInstance().getFaceDofLocal
      (shapeIdx, CFPolyOrder::ORDER1, NODE, CFPolyForm::LAGRANGE);
    const CFuint nbCellFaces = conn.nbRows();
    cf_assert(shapeIdx < m_cellConn.size()); 
    cf_assert(nbCellFaces <= 6); // hexa have 6 faces
    
    CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::copyLocalCellConnectivity() => shapeIdx    = " << shapeIdx << "\n");
    CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::copyLocalCellConnectivity() => nbCellFaces = " << nbCellFaces << "\n");
    
    m_cellConn[shapeIdx].setNbFaces(nbCellFaces);
    for (CFuint f = 0; f < nbCellFaces; ++f) {
      const CFuint nbFaceNodes = conn.nbCols(f);
      CFLog(VERBOSE, "ConvDiffLLAVRHSFluxReconstructionCUDA::copyLocalCellConnectivity() => face [" << f << "] has "<< nbFaceNodes << " nodes\n");
      cf_assert(nbFaceNodes <= 4); // quad faces have 4 nodes
      m_cellConn[shapeIdx].setNbFaceNodes(f,nbFaceNodes);
      for (CFuint n = 0; n < nbFaceNodes; ++n) {
	cf_assert(f < 6);
	cf_assert(n < 4);
	const CFuint nodeID = conn(f,n);
	cf_assert(nodeID < 8); // hexa have 8 nodes
	m_cellConn[shapeIdx].setNodeID(f,n,nodeID);
      }
    }
  }
  m_cellConn.put();
  
  
  
  
}
      
//////////////////////////////////////////////////////////////////////////////
      
    } // namespace FluxReconstructionMethod
  
} // namespace COOLFluiD

